---
- name: End-to-End RHAIIS Deployment on AWS
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    # Automatically detect the target user for SSH connections
    target_user: "{{ ansible_user | default('ec2-user') }}"

  tasks:
    # =========================================
    # AWS Infrastructure Provisioning
    # =========================================
    - name: Set final key name
      ansible.builtin.set_fact:
        final_key_name: "{{ key_name if key_name | length > 0 else instance_name ~ '-key' }}"

    - name: Set default tags if not defined
      ansible.builtin.set_fact:
        instance_tags: "{{ instance_tags | default({}) | combine({'Name': instance_name}) }}"

    - name: Check if instance already exists
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ instance_name }}"
          instance-state-name: ["pending", "running", "stopping", "stopped"]
      register: existing_instance

    - name: Check if local PEM file exists
      ansible.builtin.stat:
        path: "./{{ final_key_name }}.pem"
      register: pem_file

    - name: Create a key pair
      amazon.aws.ec2_key:
        name: "{{ final_key_name }}"
        region: "{{ region }}"
        state: present
      register: keypair_result
      when: existing_instance.instances | length == 0 and not pem_file.stat.exists

    - name: Save private key to file if newly created
      ansible.builtin.copy:
        content: "{{ keypair_result.key.private_key }}"
        dest: "./{{ final_key_name }}.pem"
        mode: '0600'
      when: keypair_result.changed | default(false)

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ instance_name }}-vpc"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
      register: vpc
      when: existing_instance.instances | length == 0

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw
      when: existing_instance.instances | length == 0 and vpc.vpc is defined

    - name: Create Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        az: "{{ region }}a"
        region: "{{ region }}"
        map_public: true
      register: subnet
      when: existing_instance.instances | length == 0 and vpc.vpc is defined

    - name: Set subnet_id fact
      ansible.builtin.set_fact:
        subnet_id: "{{ subnet.subnet.id }}"
      when: existing_instance.instances | length == 0 and subnet.subnet is defined

    - name: Create route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "{{ instance_name }}-route-table"
        subnets:
          - "{{ subnet_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: route_table
      when: existing_instance.instances | length == 0 and subnet.subnet is defined and igw.gateway_id is defined

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ instance_name }}-sg"
        description: "Allow SSH and Web Access"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow SSH from anywhere"
          - proto: tcp
            ports: 8000
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow API access"
          - proto: tcp
            ports: 8443
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow HTTPS access"
          - proto: all
            cidr_ip: "{{ vpc_cidr }}"
            rule_desc: "Allow all traffic within VPC"
        state: present
      register: sg
      when: existing_instance.instances | length == 0 and vpc.vpc is defined

    - name: Set security group ID
      ansible.builtin.set_fact:
        sg_id: "{{ sg.group_id }}"
      when: existing_instance.instances | length == 0 and sg.group_id is defined

    - name: Launch RHEL instance
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ final_key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_group: "{{ sg_id }}"
        wait: true
        count: 1
        tags: "{{ instance_tags }}"
        network_interfaces:
          - assign_public_ip: true
            delete_on_termination: true
            device_index: 0
            subnet_id: "{{ subnet_id }}"
            groups:
              - "{{ sg_id }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ volume_size }}"
              delete_on_termination: true
      register: ec2
      when: existing_instance.instances | length == 0

    - name: Set instance info for existing instance
      ansible.builtin.set_fact:
        ec2:
          instances: "{{ existing_instance.instances }}"
      when: existing_instance.instances | length > 0

    - name: Wait for SSH to become available
      ansible.builtin.wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        delay: 10
        timeout: 300

    - name: Create instance-specific directory
      ansible.builtin.file:
        path: "./instances/{{ instance_name }}"
        state: directory
        mode: '0755'

    - name: Create inventory.ini file in instance directory
      ansible.builtin.template:
        src: inventory.ini.j2
        dest: "./instances/{{ instance_name }}/inventory.ini"
        mode: '0644'
      vars:
        public_ip: "{{ ec2.instances[0].public_ip_address }}"
        ssh_key_file: "{{ playbook_dir }}/{{ final_key_name }}.pem"
        target_user: "ec2-user"

    - name: Create symlink to instance inventory for convenience
      ansible.builtin.file:
        src: "{{ playbook_dir }}/instances/{{ instance_name }}/inventory.ini"
        dest: "{{ playbook_dir }}/inventory.ini"
        state: link
        force: true

    - name: Display inventory file information
      ansible.builtin.debug:
        msg: "Inventory files created: ./instances/{{ instance_name }}/inventory.ini"

    # =========================================
    # Dynamic Inventory Setup for RHAIIS
    # =========================================
    - name: Add the newly created instance to inventory
      ansible.builtin.add_host:
        name: "{{ ec2.instances[0].public_ip_address }}"
        ansible_host: "{{ ec2.instances[0].public_ip_address }}"
        ansible_user: "{{ target_user }}"
        ansible_ssh_private_key_file: "./{{ final_key_name }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        groups: gpu_servers

    - name: Display instance information
      ansible.builtin.debug:
        msg: "AWS Instance {{ instance_name }} provisioned at {{ ec2.instances[0].public_ip_address }}. Proceeding with RHAIIS installation..."

# =========================================
# NVIDIA CUDA Setup
# =========================================
- name: Setup NVIDIA CUDA
  hosts: gpu_servers
  gather_facts: true
  become: true

  tasks:
    - name: Wait for instance to be fully ready
      ansible.builtin.wait_for_connection:
        delay: 30
        timeout: 300

    - name: Gather system facts
      ansible.builtin.setup:

  roles:
    - setup_nvidia_cuda

# =========================================
# RHAIIS Deployment
# =========================================
- name: Deploy RHAIIS
  hosts: gpu_servers
  become: true

  roles:
    - setup_rhaiis_on_rhel

  post_tasks:
    - name: Display deployment completion
      ansible.builtin.debug:
        msg: |
          RHAIIS Deployment Completed Successfully!

          API Endpoint: http://{{ ansible_host }}:8000
          SSH Access: ssh -i ./{{ hostvars['localhost']['final_key_name'] }}.pem {{ ansible_user }}@{{ ansible_host }}
          Inventory: ./instances/{{ hostvars['localhost']['instance_name'] }}/inventory.ini

          Test with: curl http://{{ ansible_host }}:8000/docs

