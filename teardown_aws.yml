---
- name: Teardown RHEL EC2 instance and associated resources for rhaiis
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Get instance info
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ instance_name }}"
      register: ec2_info

    - name: Terminate instance if it exists
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        instance_ids: "{{ ec2_info.instances | map(attribute='instance_id') | list }}"
        state: absent
      when: ec2_info.instances | length > 0

    - name: Disassociate and release EIP
      amazon.aws.ec2_eip:
        state: absent
        device_id: "{{ item.instance_id }}"
      when: item.public_ip_address is defined and item.public_ip_address | length > 0
      loop: "{{ ec2_info.instances }}"
      loop_control:
        label: "{{ item.instance_id }}"

    - name: Get VPC info
      amazon.aws.ec2_vpc_net_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ instance_name }}-vpc"
      register: vpc_info

    - name: Set VPC ID fact if found
      ansible.builtin.set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
      when: vpc_info.vpcs | length > 0

    # Get route tables before deleting subnets
    - name: Get route tables
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: route_tables
      when: vpc_id is defined

        # Clean up any blackhole routes that might prevent route table deletion
    - name: Remove blackhole routes using AWS CLI
      ansible.builtin.shell: |
        set -o pipefail
        # Get route tables with blackhole routes and clean them up
        rt_query='RouteTables[?Routes[?State==`blackhole`]].RouteTableId'
        for rt_id in $(aws ec2 describe-route-tables --region {{ region }} \
                       --filters "Name=vpc-id,Values={{ vpc_id }}" \
                       --query "$rt_query" --output text); do
          echo "Cleaning blackhole routes from route table: $rt_id"
          # Delete any blackhole routes (typically 0.0.0.0/0 pointing to deleted IGW)
          route_query='RouteTables[0].Routes[?State==`blackhole`].DestinationCidrBlock'
          aws ec2 describe-route-tables --region {{ region }} --route-table-ids $rt_id \
              --query "$route_query" --output text | while read -r cidr; do
            if [ "$cidr" != "None" ] && [ "$cidr" != "" ]; then
              echo "Removing blackhole route: $cidr from $rt_id"
              aws ec2 delete-route --region {{ region }} --route-table-id $rt_id \
                  --destination-cidr-block $cidr || true
            fi
          done
        done
      when: vpc_id is defined
      failed_when: false
      changed_when: false

    # Delete non-main route tables (main route tables are deleted with VPC)
    - name: Delete non-main route tables
      amazon.aws.ec2_vpc_route_table:
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        route_table_id: "{{ item.id }}"
        state: absent
      loop: "{{ route_tables.route_tables | default([]) }}"
      loop_control:
        label: "{{ item.id }}"
      when:
        - vpc_id is defined
        - route_tables.route_tables is defined
        - not (item.associations | default([]) | selectattr('main', 'equalto', true) | list)
      failed_when: false

    - name: Delete security group
      amazon.aws.ec2_security_group:
        name: "{{ instance_name }}-sg"
        region: "{{ region }}"
        state: absent
      failed_when: false

    - name: Get IGW info
      amazon.aws.ec2_vpc_igw_info:
        region: "{{ region }}"
        filters:
          attachment.vpc-id: "{{ vpc_id }}"
      register: igw_info
      when: vpc_id is defined

    - name: Debug IGW info
      ansible.builtin.debug:
        var: igw_info
      when: vpc_id is defined

    - name: Delete IGW if attached
      amazon.aws.ec2_vpc_igw:
        state: absent
        internet_gateway_id: "{{ item.internet_gateway_id }}"
        region: "{{ region }}"
      loop: "{{ igw_info.internet_gateways | default([]) }}"
      loop_control:
        label: "{{ item.internet_gateway_id }}"
      when: vpc_id is defined and igw_info.internet_gateways is defined and igw_info.internet_gateways | length > 0
      failed_when: false

    - name: Get Subnet info
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: subnet_info
      when: vpc_id is defined

    - name: Delete Subnet(s)
      amazon.aws.ec2_vpc_subnet:
        region: "{{ region }}"
        state: absent
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ item.cidr_block }}"
      loop: "{{ subnet_info.subnets | default([]) }}"
      loop_control:
        label: "{{ item.cidr_block }}"
      when: vpc_id is defined and subnet_info.subnets is defined and subnet_info.subnets | length > 0
      failed_when: false

    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        region: "{{ region }}"
        state: absent
        vpc_id: "{{ vpc_id }}"
      when: vpc_id is defined
      failed_when: false

    - name: Set final key name
      ansible.builtin.set_fact:
        final_key_name: "{{ key_name | default('') if key_name | default('') | length > 0 else instance_name ~ '-key' }}"

    - name: Delete key pair
      amazon.aws.ec2_key:
        name: "{{ final_key_name }}"
        region: "{{ region }}"
        state: absent
      failed_when: false

    - name: Delete PEM file
      ansible.builtin.file:
        path: "./{{ final_key_name }}.pem"
        state: absent
      failed_when: false

    - name: Remove inventory symlink if it exists
      ansible.builtin.file:
        path: "./inventory.ini"
        state: absent
      failed_when: false

    - name: Delete instance-specific directory
      ansible.builtin.file:
        path: "./instances/{{ instance_name }}"
        state: absent
      failed_when: false
